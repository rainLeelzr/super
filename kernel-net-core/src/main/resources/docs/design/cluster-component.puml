@startuml
'https://plantuml.com/component-diagram

frame 集群应用网络通信组件数据流{

    database redis {

    }

    node 网关实例 {
        component [http服务\n-使用一致性hash算法，分配给客户端网关地址] as httpServer {
        }

        component [底层网络通讯框架\n-具体网络通讯框架的配置与启动监听] as server {
        }

        component [服务注册] as serviceRegister {
        }

        component [事件处理器] as eventHandler_gateway {
            [OnConnectEventHandler]
            [OnDisconnectEventHandler]
            [OnAnyMessageEventHandler]
        }

        component [消息事件处理器变更监听器] as messageEventHandlerChangeListener {
        }

        component [消息推送中转监听器] as messageTransferListener {

        }

        component [消息发送器\n-提供统一消息发送接口\n-负责调用标签服务和会话服务把消息发送出去] as messageSender {

        }

        component [会话服务\n-管理并保存客户端连接的会话对象\n-命名空间\n-房间]  as sessionService {

        }

        component [标签服务\n-提供标签curd服务\n-内置标签如用户标签]  as tagService {

        }
    }

    node 应用实例 {
        component [服务发现] as serviceDiscovery {
        }

        component [消息事件处理器收集器\n-收集所有本应用的OnMessageEventHandler] as messageEventHandlerCollector {

        }

        component [消息事件中转监听器] as messageEventTransferListener {
        }

        component [事件处理器/业务组件] as eventHandler_biz {
            [OnMessageEventHandler\n-业务实现接口以处理消息] as OnMessageEventHandler_biz #orange
        }

        component [消息发送器\n-提供统一消息发送接口\n-负责把推送给客户端的消息中转到redis] as messageSender_TransferSender {

        }

        component [会话服务\n-获取在线用户列表\n-判断用户是否在线]  as sessionService_biz {

        }

        component [标签服务\n-提供标签curd服务\n-内置标签如用户标签]  as tagService_biz {

        }
    }

    json 事件处理器接口 {
        "OnConnectEventHandler": "新建连接事件处理器",
        "OnDisconnectEventHandler": "断开连接事件处理器",
        "OnMessageEventHandler": [
            "消息事件处理器",
            {
                "内置": {
                    "OnLoginEventHandler": "登录消息事件处理器",
                    "OnLogoutEventHandler": "登出消息事件处理器",
                    "OnPingEventHandler": "ping消息事件处理器",
                    "OnClientSendBroadcastEventHandler": "广播消息事件处理器"
                }
            }
        ],
        "OnAnyMessageEventHandler": "任何消息事件处理器",
        "OnErrorEventHandler": "错误事件处理器"
    }

    cloud 箭头方向为数据流向\n\n服务启动初始化(black)\n客户端连接/断连(blue)\n收到客户端消息(red)\n查询/编辑标签(orange)\n推送消息(purple) as comment{
        comment -up- 事件处理器接口 #white
    }

' 应用实例与各组件的关系
    ' 服务启动初始化' #black
    OnMessageEventHandler_biz --> messageEventHandlerCollector #black
    messageEventHandlerCollector --> redis #black
'    redis --> serviceDiscovery

    ' 客户端连接 #blue
    eventHandler_biz --> sessionService_biz #blue
    sessionService_biz --> tagService_biz #blue
    tagService_biz --> redis #blue

    ' 收到客户端消息 #red
    redis --> messageEventTransferListener #red
    messageEventTransferListener --> OnMessageEventHandler_biz #red

    ' 查询/编辑标签 #orange
    eventHandler_biz --> tagService_biz #orange
    tagService_biz --> redis #orange

    ' 推送消息 #purple
    eventHandler_biz --> messageSender_TransferSender #purple
    messageSender_TransferSender --> redis #purple


' 网关实例与各组件的关系
    ' 服务启动初始化 #black
'    serviceRegister --> redis
    redis --> messageEventHandlerChangeListener #black : 广播cmd给网关
    messageEventHandlerChangeListener --> server #black : 添加消息事件监听

    ' 客户端连接 #blue
    server --> OnConnectEventHandler #blue
    OnConnectEventHandler --> sessionService #blue: 记录会话
    OnDisconnectEventHandler --> sessionService #blue : 删除会话
    sessionService --> redis #blue : 新增/删除会话

    ' 收到客户端消息 #red
    server --> OnAnyMessageEventHandler #red
    OnAnyMessageEventHandler --> redis #red

    ' 推送消息 #purple
    redis --> messageTransferListener #purple
    messageTransferListener --> messageSender #purple : 发送消息给客户端
    messageSender --> tagService #purple : 发送消息给客户端
    tagService --> sessionService #purple : 执行消息发送逻辑

}
footer %filename() rendered with PlantUML version %version()
@enduml